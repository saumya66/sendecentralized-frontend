import Head from "next/head"
import styles from "../styles/Home.module.css"
import LotteryEntrance from "../components/SendContract"
import { useMoralis } from "react-moralis"
import { ConnectButton } from "web3uikit"
import ModalComponent from "../components/ModalComponent"
import { useEffect, useState } from "react"

const supportedChains = ["31337", "80001", "5"]
const networks = {
    polygon_mumbai: {
        chainId: `0x${Number(80001).toString()}`,
        chainName: "Polygon Mumbai",
        nativeCurrency: {
            name: "MATIC",
            symbol: "MATIC",
            decimals: 18,
        },
        rpcUrls: ["https://rpc-mumbai.maticvigil.com/"],
        blockExplorerUrls: ["https://mumbai.polygonscan.com/"],
    },
    goerli: {
        chainId: `0x${Number(5).toString()}`,
        chainName: "Goerli",
        nativeCurrency: {
            name: "GoerliETH",
            symbol: "GoerliETH",
            decimals: 18,
        },
        rpcUrls: ["https://goerli.infura.io/v3/"],
        blockExplorerUrls: ["https://goerli.etherscan.io"],
    },
}

export default function Home() {
    const { isWeb3Enabled, chainId } = useMoralis()

    const [error, setError] = useState()

    const handleNetworkSwitch = async (networkName) => {
        setError()
        await changeNetwork({ networkName, setError })
    }

    const networkChanged = (chainId) => {
        console.log({ chainId })
    }

    useEffect(() => {
        window.ethereum.on("chainChanged", networkChanged)

        return () => {
            window.ethereum.removeListener("chainChanged", networkChanged)
        }
    }, [])

    const changeNetwork = async ({ networkName, setError }) => {
        try {
            if (!window.ethereum) throw new Error("No crypto wallet found")
            await window.ethereum.request({
                method: "wallet_addEthereumChain",
                params: [
                    {
                        ...networks[networkName],
                    },
                ],
            })
        } catch (err) {
            setError(err.message)
        }
    }
    return (
        <div className={styles.container}>
            <Head>
                <title>Sendecentralized</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <nav className={styles.header}>
                <h1 className={styles.h1}>Sendecentralized</h1>
                <div className="ml-auto py-2 px-4">
                    <ConnectButton moralisAuth={false} />
                </div>
            </nav>

            {isWeb3Enabled ? (
                <div>
                    {supportedChains.includes(parseInt(chainId).toString()) ? (
                        <div className="flex flex-row">
                            <LotteryEntrance className="p-8" />
                        </div>
                    ) : (
                        <>
                            <ModalComponent
                                text={`Please switch to a supported chainId. The supported Chain Ids are: ${supportedChains}`}
                            />
                        </>
                        // <div
                        //     className={styles.text}
                        // >{`Please switch to a supported chainId. The supported Chain Ids are: ${supportedChains}`}</div>
                    )}
                </div>
            ) : (
                <div>Please connect to a Wallet</div>
            )}
        </div>
    )
}
